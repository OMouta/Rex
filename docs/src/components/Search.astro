---
// Search.astro - Client-side search component using FlexSearch
---

<div class="relative" id="search-container">
  <div class="relative">
    <input
      type="search"
      id="search-input"
      placeholder="Search documentation... (Ctrl+K)"
      class="w-full px-4 py-2 pl-10 pr-16 rounded-lg bg-zinc-800 border border-zinc-700 text-zinc-200 placeholder-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
      autocomplete="off"
    />
    <svg 
      class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-zinc-400"
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
    <kbd class="absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-zinc-500 bg-zinc-700 px-2 py-1 rounded border border-zinc-600">
      âŒ˜K
    </kbd>
  </div>
  
  <!-- Search Results Dropdown -->
  <div 
    id="search-results" 
    class="absolute top-full left-0 right-0 mt-2 bg-zinc-900 border border-zinc-700 rounded-lg shadow-lg max-h-96 overflow-y-auto z-50 hidden"
  >
    <!-- Version filter toggle -->
    <div id="search-version-toggle" class="p-2 border-b border-zinc-800 hidden">
      <button 
        id="version-filter-btn"
        class="flex items-center justify-between w-full px-3 py-2 text-xs text-zinc-400 hover:text-zinc-300 hover:bg-zinc-800 rounded transition-colors"
      >
        <span id="version-filter-text">...</span>
        <span class="ml-2 text-xs text-zinc-500" id="version-filter-subtext">Toggle All Versions</span>
      </button>
    </div>
    
    <div id="search-results-content" class="p-2">
      <!-- Results will be populated here -->
    </div>
    <div id="search-no-results" class="p-4 text-center text-zinc-400 text-sm hidden">
      No results found
    </div>
    <div id="search-loading" class="p-4 text-center text-zinc-400 text-sm hidden">
      Loading...
    </div>
  </div>
</div>

<script>
  import { Index } from 'flexsearch';
  
  interface SearchIndexItem {
    slug: string;
    title: string;
    description: string;
    body: string;
    category: string;
    version: string;
    url: string;
  }

  class SearchManager {
    private index: Index | null = null;
    private documents: SearchIndexItem[] = [];
    private isLoaded = false;
    private loadingPromise: Promise<void> | null = null;
    private currentVersion: string | null = null;
    private searchAllVersions = false;

    constructor() {
      this.detectCurrentVersion();
      this.initialize();
    }

    extractVersionFromSlug(slug: string): string {
      // Extract version from slug format (e.g., "02/introduction" -> "0.2")
      const parts = slug.split('/');
      if (parts.length >= 1) {
        const slugVersion = parts[0];
        // Convert from slug format (02, 03, 10, etc.) to display format (0.2, 0.3, 1.0, etc.)
        if (/^\d{2,}$/.test(slugVersion)) {
          // Handle formats like "02" -> "0.2", "03" -> "0.3", "10" -> "1.0"
          if (slugVersion.length === 2 && slugVersion.startsWith('0')) {
            return `0.${parseInt(slugVersion.slice(1), 10)}`;
          } else {
            // For versions like "10", "11", etc.
            const major = Math.floor(parseInt(slugVersion, 10) / 10);
            const minor = parseInt(slugVersion, 10) % 10;
            return `${major}.${minor}`;
          }
        }
        // If it's already in the right format (0.2, 0.3, etc.), return as is
        if (/^\d+\.\d+$/.test(slugVersion)) {
          return slugVersion;
        }
      }
      return slug.split('/')[0]; // Fallback to first part of slug
    }

    private detectCurrentVersion() {
      // Extract version from current URL path
      const path = window.location.pathname;
      if (path.startsWith('/docs/')) {
        const pathParts = path.split('/');
        if (pathParts.length >= 3) {
          const potentialVersion = pathParts[2];
          // Match semantic version pattern (0.2, 0.3, 1.0, etc.)
          if (/^\d+\.\d+$/.test(potentialVersion)) {
            this.currentVersion = potentialVersion;
          }
        }
      }
    }

    toggleSearchAllVersions() {
      this.searchAllVersions = !this.searchAllVersions;
      return this.searchAllVersions;
    }

    getSearchMode() {
      return {
        searchAllVersions: this.searchAllVersions,
        currentVersion: this.currentVersion
      };
    }

    private async initialize() {
      if (this.loadingPromise) return this.loadingPromise;
      
      this.loadingPromise = this.loadSearchIndex();
      await this.loadingPromise;
    }

    private async loadSearchIndex() {
      try {
        this.showLoading(true);
        
        const response = await fetch('/api/search-index.json');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        this.documents = await response.json();
        
        // Create FlexSearch index
        this.index = new Index({
          tokenize: 'forward',
          preset: 'match',
          resolution: 9
        });

        // Add documents to index
        this.documents.forEach((doc, i) => {
          const searchableContent = `${doc.title} ${doc.description} ${doc.body} ${doc.category}`;
          this.index!.add(i, searchableContent);
        });

        this.isLoaded = true;
        this.showLoading(false);
      } catch (error) {
        console.error('Failed to load search index:', error);
        this.showLoading(false);
      }
    }

    private showLoading(show: boolean) {
      const loadingEl = document.getElementById('search-loading');
      if (loadingEl) {
        loadingEl.classList.toggle('hidden', !show);
      }
    }

    async search(query: string): Promise<SearchIndexItem[]> {
      if (!this.isLoaded) {
        await this.initialize();
      }

      if (!this.index || !query.trim()) {
        return [];
      }

      const results = this.index.search(query, { limit: 20 });
      let filteredResults = results.map(id => this.documents[id as number]).filter(Boolean);
      
      // Filter by current version if we're on a versioned page and not searching all versions
      if (this.currentVersion && !this.searchAllVersions) {
        filteredResults = filteredResults.filter(doc => {
          // Convert slug version format to display version format
          const docVersion = this.extractVersionFromSlug(doc.slug);
          return docVersion === this.currentVersion;
        });
      }
      
      return filteredResults.slice(0, 10); // Limit to 10 results
    }
  }

  // Initialize search when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results') as HTMLElement;
    const searchResultsContent = document.getElementById('search-results-content') as HTMLElement;
    const searchNoResults = document.getElementById('search-no-results') as HTMLElement;
    const versionToggle = document.getElementById('search-version-toggle') as HTMLElement;
    const versionFilterBtn = document.getElementById('version-filter-btn') as HTMLElement;
    const versionFilterText = document.getElementById('version-filter-text') as HTMLElement;
    const versionFilterSubtext = document.getElementById('version-filter-subtext') as HTMLElement;
    
    if (!searchInput || !searchResults || !searchResultsContent || !searchNoResults) {
      return;
    }

    const searchManager = new SearchManager();
    let searchTimeout: number;

    // Update version toggle visibility and text
    const updateVersionToggle = () => {
      const searchMode = searchManager.getSearchMode();
      if (searchMode.currentVersion && versionToggle) {
        versionToggle.classList.remove('hidden');
        if (versionFilterText) {
          versionFilterText.textContent = searchMode.searchAllVersions 
            ? 'Searching all versions' 
            : `Searching in v${searchMode.currentVersion}`;
          
          versionFilterSubtext.textContent = searchMode.searchAllVersions 
            ? 'Click to toggle current version'
            : 'Click to toggle all versions';

        }
      } else if (versionToggle) {
        versionToggle.classList.add('hidden');
      }
    };

    // Initialize version toggle
    updateVersionToggle();

    // Version filter toggle handler
    if (versionFilterBtn) {
      versionFilterBtn.addEventListener('click', () => {
        searchManager.toggleSearchAllVersions();
        updateVersionToggle();
        
        // Re-search with current query
        const currentQuery = searchInput.value;
        if (currentQuery.trim()) {
          performSearch(currentQuery);
        }
      });
    }

    // Debounced search function
    const performSearch = async (query: string) => {
      if (!query.trim()) {
        hideResults();
        return;
      }

      try {
        const results = await searchManager.search(query);
        displayResults(results);
      } catch (error) {
        console.error('Search error:', error);
        hideResults();
      }
    };

    // Display search results
    const displayResults = (results: SearchIndexItem[]) => {
      searchResultsContent.innerHTML = '';
      searchNoResults.classList.add('hidden');

      if (results.length === 0) {
        searchNoResults.classList.remove('hidden');
        searchResults.classList.remove('hidden');
        return;
      }

      results.forEach(result => {
        const resultElement = document.createElement('a');
        
        // Convert slug to user-friendly URL using dynamic version detection
        const slugVersion = result.slug.split('/')[0];
        const displayVersion = searchManager.extractVersionFromSlug(result.slug);
        let href = result.url;
        
        // Convert slug format to user-friendly URL format
        if (/^\d{2,}$/.test(slugVersion)) {
          href = `/docs/${result.slug.replace(`${slugVersion}/`, `${displayVersion}/`)}`;
        }
        
        resultElement.href = href;
        resultElement.className = 'block p-3 hover:bg-zinc-800 rounded-lg transition-colors border-b border-zinc-800 last:border-b-0';
        
        resultElement.innerHTML = `
          <div class="flex items-center justify-between mb-1">
            <div class="font-medium text-zinc-200 text-sm">${escapeHtml(result.title)}</div>
            <div class="text-xs text-zinc-500 bg-zinc-800 px-2 py-1 rounded">v${displayVersion}</div>
          </div>
          <div class="text-xs text-zinc-400 mb-1">${escapeHtml(result.category)}</div>
          <div class="text-xs text-zinc-500 line-clamp-2">${escapeHtml(result.description)}</div>
        `;
        
        searchResultsContent.appendChild(resultElement);
      });

      searchResults.classList.remove('hidden');
    };

    // Hide search results
    const hideResults = () => {
      searchResults.classList.add('hidden');
    };

    // Input event handler
    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;
      
      clearTimeout(searchTimeout);
      searchTimeout = window.setTimeout(() => {
        performSearch(query);
      }, 300); // 300ms debounce
    });

    // Hide results when clicking outside
    document.addEventListener('click', (e) => {
      if (!searchResults.contains(e.target as Node) && !searchInput.contains(e.target as Node)) {
        hideResults();
      }
    });

    // Keyboard navigation
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideResults();
        searchInput.blur();
      }
    });

    // Global keyboard shortcut (Ctrl/Cmd + K)
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        searchInput.focus();
      }
    });
  });

  // Utility function to escape HTML
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
