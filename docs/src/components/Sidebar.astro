---
import { getCollection } from 'astro:content';
import { categoryOrder, versions } from '../content/config';
import { convertVersionToSlug, convertSlugToFriendlyUrl } from '../utils/version-utils';

export interface Props {
  selectedVersion?: string;
}

const { selectedVersion: propVersion } = Astro.props;

const docs = await getCollection('docs');
const currentPath = Astro.url.pathname;

// Define type for version info
interface VersionInfo {
  label: string;
  status: string;
  statusLabel: string;
  isDefault?: boolean;
}

// Define type for category order
type CategoryOrderType = Record<string, number>;

// Get the selected version from props first, then URL params, then default
const urlParams = new URL(Astro.request.url).searchParams;
const selectedVersion = propVersion || urlParams.get('version') || Object.entries(versions).find(
  ([_, versionInfo]) => (versionInfo as VersionInfo).isDefault
)?.[0] || '0.2';

// Convert user-friendly version to slug version for filtering
const slugVersion = convertVersionToSlug(selectedVersion);

// Filter docs by version using the slug format
const filteredDocs = docs.filter(doc => {
  // Actual slugs are like "02/introduction", "03/introduction"
  return doc.slug.startsWith(`${slugVersion}/`);
});

// Group docs by category and sort by order
const groupedDocs = filteredDocs.reduce((acc, doc) => {
  const category = doc.data.category || 'General';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(doc);
  return acc;
}, {} as Record<string, typeof filteredDocs>);

// Sort each category by order
Object.keys(groupedDocs).forEach(category => {
  groupedDocs[category].sort((a, b) => (a.data.order || 999) - (b.data.order || 999));
});

// Sort categories based on defined order
const sortedCategories = Object.keys(groupedDocs).sort((a, b) => {
  const orderA = (categoryOrder as CategoryOrderType)[a] || 999;
  const orderB = (categoryOrder as CategoryOrderType)[b] || 999;
  return orderA - orderB;
});

// Get version status for indicator
const versionInfo = (versions as Record<string, VersionInfo>)[selectedVersion] || 
  { status: 'stable', statusLabel: 'Stable', label: selectedVersion };
---

<aside 
  id="sidebar" 
  class="hidden lg:block w-64 bg-zinc-950 border-r border-zinc-800 sticky top-16 h-[calc(100vh-4rem)] overflow-hidden"
>
  {versionInfo.status !== 'stable' && (
    <div class={`sticky top-0 z-20 backdrop-blur-md bg-zinc-950/90 border-b border-zinc-800 p-3 text-sm font-medium
      ${versionInfo.status === 'beta' ? 'bg-blue-950/90 text-blue-400 border-b-blue-800' : ''}
      ${versionInfo.status === 'outdated' ? 'bg-amber-950/90 text-amber-400 border-b-amber-800' : ''}
      ${versionInfo.status === 'prerelease' ? 'bg-purple-950/90 text-purple-400 border-b-purple-800' : ''}
      ${versionInfo.status === 'experimental' ? 'bg-red-950/90 text-red-400 border-b-red-800' : ''}
    `}>
      <div class="flex items-center">
        <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span>
            {versionInfo.statusLabel.charAt(0).toUpperCase() + versionInfo.statusLabel.slice(1)} Documentation
        </span>
      </div>
      <div class="mt-1 text-xs opacity-80">
        {versionInfo.status === 'beta' && "This is beta documentation and may change before final release."}
        {versionInfo.status === 'outdated' && "This is outdated documentation. Consider using a newer version."}
        {versionInfo.status === 'prerelease' && "This is pre-release documentation for upcoming features."}
        {versionInfo.status === 'experimental' && "This is experimental documentation for features in development."}
      </div>
    </div>
  )}
  
  <nav class="h-full overflow-y-auto">
    <div class="p-6 space-y-8 pb-32">
      {sortedCategories.map((category) => (
        <div>
          <h3 class="text-xs font-semibold text-zinc-400 uppercase tracking-wider mb-4">
            {category}
          </h3>
          <ul class="space-y-1">
            {groupedDocs[category].map((doc) => {
              // Generate user-friendly URLs with dots
              let href = convertSlugToFriendlyUrl(doc.slug);
              
              // Add URL parameters if they exist
              if (urlParams.toString()) {
                href += `?${urlParams.toString()}`;
              }
              
              // More robust active state detection for production
              const cleanHref = href.split('?')[0];
              const cleanCurrentPath = currentPath.endsWith('/') ? currentPath.slice(0, -1) : currentPath;
              const cleanHrefPath = cleanHref.endsWith('/') ? cleanHref.slice(0, -1) : cleanHref;
              
              const isActive = cleanCurrentPath === cleanHrefPath || 
                             cleanCurrentPath === cleanHref || 
                             currentPath === cleanHref;
              return (
                <li>
                  <a
                    href={href}
                    class={`group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                      isActive 
                        ? 'bg-primary-900/60 text-primary-300 border-l-4 border-primary-500 shadow-inner font-semibold'
                        : 'text-zinc-400 hover:text-zinc-300 hover:bg-zinc-800/50'
                    }`}
                  >
                    <span class="truncate">{doc.data.title}</span>
                    {isActive && (
                      <svg class="ml-auto w-4 h-4 text-primary-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                      </svg>
                    )}
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      ))}
    </div>
  </nav>
</aside>