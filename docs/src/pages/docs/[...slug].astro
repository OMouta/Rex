---
import { getCollection } from 'astro:content';
import DocsLayout from '../../layouts/DocsLayout.astro';
import { versions } from '../../content/config';

// Define type for version info  
interface VersionInfo {
  label: string;
  status: string;
  statusLabel: string;
  isDefault?: boolean;
}

export async function getStaticPaths() {
  const docs = await getCollection('docs');
  console.log(docs.map(doc => doc.slug)); // Add this line
  
  const paths = [];
  
  for (const doc of docs) {
    // Add the original route (02/introduction, 03/introduction, etc.)
    paths.push({
      params: { slug: doc.slug },
      props: { doc }
    });
    
    // Add user-friendly routes with dots using dynamic version detection
    const slugParts = doc.slug.split('/');
    if (slugParts.length >= 2) {
      const slugVersion = slugParts[0];
      // Convert from slug format (02, 03, 10, etc.) to display format (0.2, 0.3, 1.0, etc.)
      if (/^\d{2,}$/.test(slugVersion)) {
        let displayVersion;
        if (slugVersion.length === 2 && slugVersion.startsWith('0')) {
          displayVersion = `0.${parseInt(slugVersion.slice(1), 10)}`;
        } else {
          const major = Math.floor(parseInt(slugVersion, 10) / 10);
          const minor = parseInt(slugVersion, 10) % 10;
          displayVersion = `${major}.${minor}`;
        }
        const friendlySlug = doc.slug.replace(`${slugVersion}/`, `${displayVersion}/`);
        paths.push({
          params: { slug: friendlySlug },
          props: { doc }
        });
      }
    }
  }
  
  return paths;
}

const { doc } = Astro.props;
const { Content, headings } = await doc.render();

// Extract version from slug (first part) - handle both 02/03 and 0.2/0.3 formats
const slugParts = doc.slug.split('/');
// Normalize version: handles "02", "03", "0.2", "0.3", etc.
function normalizeVersion(version: string) {
  // If version matches "0.2", "0.3", etc., return as is
  if (/^\d+\.\d+$/.test(version)) return version;
  // If version matches "02", "03", etc., convert to "0.2", "0.3"
  if (/^\d{2}$/.test(version)) return `0.${parseInt(version, 10)}`;
  // Otherwise, return as is
  return version;
}
const originalVersion = slugParts[0];
const selectedVersion = normalizeVersion(originalVersion);
---

<DocsLayout 
  title={doc.data.title} 
  description={doc.data.description} 
  headings={headings} 
  version={selectedVersion}
>
  <div class="prose prose-invert prose-lg max-w-none">
    <div class="mb-8 pb-8 border-b border-zinc-800">
      <h1 class="text-4xl font-bold text-zinc-100 mb-4 tracking-tight">{doc.data.title}</h1>
      <p class="text-xl text-zinc-400 leading-relaxed">{doc.data.description}</p>
      <div class="mt-6 flex items-center space-x-6 text-sm text-zinc-500">
        {doc.data.lastUpdated && (
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Last updated: {doc.data.lastUpdated.toLocaleDateString()}
          </div>
        )}
        <div class="flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          Version: {selectedVersion}
        </div>
      </div>
    </div>
    <Content />
  </div>
</DocsLayout>

<style>
  .prose {
    @apply text-zinc-300;
  }

  .prose code {
    @apply bg-zinc-800 text-primary-400 font-mono px-2 py-1 rounded-md border border-zinc-700
  }
  
  .astro-code {
    @apply bg-zinc-900 border border-zinc-800 rounded-lg overflow-x-auto p-6 my-6;
  }
  
  .astro-code code {
    background: none !important;
    background-color: transparent !important;
    padding: 0 !important;
    border: none !important;
    border-radius: 0 !important;
  }
  
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    @apply text-zinc-100 font-bold;
  }
  
  .prose h2 {
    @apply text-2xl mt-12 mb-6 pb-3 border-b border-zinc-800;
  }
  
  .prose h3 {
    @apply text-xl mt-8 mb-4;
  }
  
  .prose h4 {
    @apply text-lg mt-6 mb-3;
  }
  
  .prose a {
    @apply text-primary-400 hover:text-primary-300 transition-colors no-underline;
  }
  
  .prose a:hover {
    @apply underline;
  }
  
  .prose code {
    @apply bg-zinc-800 text-primary-400 px-2 py-1 rounded-md text-sm font-mono border border-zinc-700;
  }
  
  .prose pre {
    @apply bg-zinc-900 border border-zinc-800 rounded-lg overflow-x-auto p-6 my-6;
  }
  
  .prose blockquote {
    @apply border-l-4 border-primary-500 bg-zinc-900 p-6 rounded-r-lg my-6 not-italic;
  }
  
  .prose blockquote p {
    @apply text-zinc-300 mb-0;
  }
  
  .prose table {
    @apply bg-zinc-900 border border-zinc-800 rounded-lg overflow-hidden my-6;
  }
  
  .prose thead {
    @apply bg-zinc-800;
  }
  
  .prose th {
    @apply text-zinc-200 font-semibold px-6 py-3 text-left;
  }
  
  .prose td {
    @apply px-6 py-3 border-t border-zinc-800 text-zinc-300;
  }
  
  .prose ul,
  .prose ol {
    @apply text-zinc-300;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose strong {
    @apply text-zinc-200 font-semibold;
  }
</style>