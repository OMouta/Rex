---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { Code } from 'astro:components';
import { DOCS_LINKS } from '../utils/docs-links';
---

<Layout 
title="Rex - The Reactive Roblox Framework"
description="Build reactive, component-based user interfaces with Rex—a declarative UI framework inspired by React/VueJs patterns, designed specifically for Roblox and Luau."
>
  <div class="min-h-screen bg-zinc-950">
    <Header />
    
    <!-- Hero Section -->
    <main class="relative h-[70vh] flex items-center justify-center text-center text-white">
      <!-- Background Pattern -->
      <div class="absolute inset-0 bg-grid-pattern-dark"></div>
      <div class="absolute inset-0 bg-gradient-to-br from-zinc-950 via-zinc-900/50 to-zinc-950"></div>
      <div class="absolute top-0 right-0 w-96 h-96 bg-primary-500/5 rounded-full blur-3xl"></div>
      <div class="absolute bottom-0 left-0 w-96 h-96 bg-secondary-500/5 rounded-full blur-3xl"></div>
      
      <div class="relative">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16">
          <div class="text-center">
            <!-- Main Heading -->
            <h1 class="text-4xl sm:text-6xl lg:text-7xl font-black tracking-tight">
              <span class="bg-gradient-to-r from-primary-400 to-secondary-400 bg-clip-text text-transparent">
                The Reactive Roblox Framework
              </span>
            </h1>
            
            <!-- Subtitle -->
            <div class="mt-8 max-w-5xl mx-auto">
              <p class="text-lg sm:text-xl text-zinc-400 leading-relaxed">
                Build reactive, component-based user interfaces with Rex—a declarative UI framework inspired by React/VueJs patterns, designed specifically for Roblox and Luau.
              </p>
            </div>
            
            <!-- CTA Buttons -->
            <div class="mt-10 flex flex-col sm:flex-row gap-4 justify-center">
                <a
                href={DOCS_LINKS.introduction}
                class="inline-flex items-center px-8 py-3 bg-primary-500 text-white font-semibold rounded-lg hover:bg-primary-600 transition-colors border border-primary-600"
                > Get started </a>
                <a
                href={DOCS_LINKS.quickStart}
                class="inline-flex items-center px-8 py-3 bg-zinc-800 text-white font-semibold rounded-lg hover:bg-zinc-700 transition-colors border border-zinc-600"
                > Quick Start </a>
                <a
                href={DOCS_LINKS.apiReference.state}
                class="inline-flex items-center px-8 py-3 bg-zinc-800 text-white font-semibold rounded-lg hover:bg-zinc-700 transition-colors border border-zinc-600"
                > See API </a>
            </div>
          </div>
        </div>
      </div>
    </main>
    
    <!-- Why Section -->
    <section class="relative py-20 bg-zinc-900/50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-16">
          <h2 class="text-3xl sm:text-4xl font-bold text-zinc-200 mb-4">
            Why Rex?
          </h2>
          <p class="text-xl text-zinc-400 max-w-2xl mx-auto">
            Rex brings modern web development patterns to Roblox, making UI development faster, more maintainable, and less error-prone.
          </p>
        </div>
        
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          <div class="group bg-zinc-900 p-8 rounded-xl border border-zinc-800 hover:border-zinc-700 transition-colors">
            <div class="w-12 h-12 bg-primary-500/10 rounded-lg flex items-center justify-center mb-6 group-hover:bg-primary-500/20 transition-colors">
              <svg class="w-6 h-6 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-zinc-200 mb-3">Lightning Fast</h3>
            <p class="text-zinc-400 leading-relaxed">
              Rex uses efficient reconciliation algorithms and batched updates to ensure optimal performance. Only elements that actually changed are updated, providing smooth 60+ FPS experiences even with complex UIs.
            </p>
          </div>
          
          <div class="group bg-zinc-900 p-8 rounded-xl border border-zinc-800 hover:border-zinc-700 transition-colors">
            <div class="w-12 h-12 bg-secondary-500/10 rounded-lg flex items-center justify-center mb-6 group-hover:bg-secondary-500/20 transition-colors">
              <svg class="w-6 h-6 text-secondary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-zinc-200 mb-3">Declarative & Reactive</h3>
            <p class="text-zinc-400 leading-relaxed">
              Build your UI using a simple, declarative syntax with automatic reactivity. State changes automatically update the UI without manual intervention, eliminating common bugs.
            </p>
          </div>
          
          <div class="group bg-zinc-900 p-8 rounded-xl border border-zinc-800 hover:border-zinc-700 transition-colors">
            <div class="w-12 h-12 bg-gradient-to-br from-primary-500/10 to-secondary-500/10 rounded-lg flex items-center justify-center mb-6 group-hover:from-primary-500/20 group-hover:to-secondary-500/20 transition-colors">
              <svg class="w-6 h-6 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-zinc-200 mb-3">Zero Dependencies</h3>
            <p class="text-zinc-400 leading-relaxed">
              Rex is completely self-contained with no external dependencies. Built specifically for Luau and Roblox, it integrates seamlessly into any project without bloating your game.
            </p>
          </div>
        </div>
      </div>
    </section>

    <!-- Syntax Showcase -->
    <section class="py-20 bg-zinc-950">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl sm:text-4xl font-bold text-zinc-200 mb-8 text-center">
        Simple, Declarative Syntax
      </h2>
      <p class="text-zinc-400 my-4 text-center">
        Rex lets you build UI with readable, maintainable code—no complex hierarchies or boilerplate.
      </p>
      <div class="flex flex-col lg:flex-row gap-12 mt-8 items-start justify-center">
        <div class="prose text-zinc-300 grow max-w-xl w-full">
        <Code
          code={`local Rex = require(game.ReplicatedStorage.Rex)

local function Counter()
  local count = Rex.useState(0)
  
  return Rex("Frame") {
    Size = UDim2.fromScale(1, 1),
    BackgroundColor3 = Color3.fromRGB(30, 30, 40),
    children = {
      Rex("TextLabel") {
        Text = count:map(function(value)
          return "Count: " .. tostring(value)
        end),
        Size = UDim2.new(1, 0, 0, 50),
        TextColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 1
      },
      Rex("TextButton") {
        Text = "Increment",
        Size = UDim2.fromOffset(120, 40),
        Position = UDim2.new(0.5, -60, 0, 60),
        BackgroundColor3 = Color3.fromRGB(70, 130, 255),
        onClick = function()
          count:update(function(current) 
            return current + 1 
          end)
        end
      }
    }
  }
end

Rex.render(Counter, game.Players.LocalPlayer.PlayerGui)`}
          lang="lua"
          theme="dark-plus"
        />
        </div>
        <div class="max-w-md w-full flex-shrink-0 bg-zinc-900 border border-zinc-800 rounded-xl p-6">
        <h3 class="text-xl font-semibold text-zinc-200 mb-4">How it works</h3>
        <ul class="space-y-4 text-zinc-400 text-base">
          <li>
          <span class="font-semibold text-primary-400">Components:</span> Functions that return Rex elements, promoting reusability and organization.
          </li>
          <li>
          <span class="font-semibold text-primary-400">State:</span> <code>Rex.useState</code> creates reactive values that automatically update the UI.
          </li>
          <li>
          <span class="font-semibold text-primary-400">Reactive Properties:</span> Use <code>:map()</code> to derive values from state that update automatically.
          </li>
          <li>
          <span class="font-semibold text-primary-400">Event Handling:</span> <code>onClick</code> and other events use camelCase naming for consistency.
          </li>
          <li>
          <span class="font-semibold text-primary-400">Rendering:</span> <code>Rex.render</code> mounts your component tree to Roblox's GUI system.
          </li>
        </ul>
        </div>
      </div>
      </div>
    </section>

    <!-- Animated Demo Section -->
    <section class="py-20 bg-gradient-to-br from-zinc-900 to-zinc-950 relative overflow-hidden">
      <!-- Background decoration -->
      <div class="absolute inset-0 bg-grid-pattern-dark opacity-30"></div>
      <div class="absolute top-0 right-0 w-96 h-96 bg-primary-500/5 rounded-full blur-3xl"></div>
      <div class="absolute bottom-0 left-0 w-96 h-96 bg-secondary-500/5 rounded-full blur-3xl"></div>
      
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div class="text-center mb-16">
          <h2 class="text-3xl sm:text-4xl font-bold text-zinc-200 mb-4">
            See Rex in Action
          </h2>
          <p class="text-xl text-zinc-400 max-w-3xl mx-auto">
            Watch how Rex automatically updates the UI when state changes. No manual DOM manipulation required.
          </p>
        </div>

        <!-- Auto-play controls -->
        <div class="text-center mb-12">
          <div class="inline-flex items-center gap-4 bg-zinc-900/50 backdrop-blur-sm border border-zinc-800 rounded-lg p-4">
            <button id="auto-demo-btn" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg transition-colors font-medium">
              ▶ Watch Auto Demo
            </button>
            <button id="reset-demo-btn" class="px-4 py-2 bg-zinc-700 hover:bg-zinc-600 text-white rounded-lg transition-colors font-medium">
              🔄 Reset
            </button>
            <div class="text-sm text-zinc-400">
              Click the button above or let it auto-increment every 2 seconds
            </div>
          </div>
        </div>
        
        <div class="grid lg:grid-cols-2 gap-12 items-start">
          <!-- Code Panel -->
          <div class="bg-zinc-900/80 backdrop-blur-sm border border-zinc-800 rounded-xl p-6 relative">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-zinc-200">Counter.luau</h3>
              <div class="flex space-x-2">
                <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              </div>
            </div>
            <div class="prose relative">
              <Code
                code={`local function Counter()
  local count = Rex.useState(0)
  local color = Rex.useComputed(function()
    local value = count:get()
    if value < 5 then
      return Color3.fromRGB(70, 130, 255)
    elseif value < 10 then
      return Color3.fromRGB(255, 165, 0)
    else
      return Color3.fromRGB(255, 70, 130)
    end
  end, {count})
  
  return Rex("Frame") {
    Size = UDim2.fromScale(1, 1),
    BackgroundColor3 = Color3.fromRGB(30, 30, 40),
    children = {
      Rex("TextLabel") {
        Text = count:map(function(value)
          return "Count: " .. tostring(value)
        end),
        Size = UDim2.new(1, 0, 0.4, 0),
        TextColor3 = Color3.new(1, 1, 1),
        TextScaled = true,
        BackgroundTransparency = 1
      },
      Rex("TextButton") {
        Text = "Click Me!",
        Size = UDim2.fromOffset(200, 60),
        Position = UDim2.new(0.5, -100, 0.6, 0),
        BackgroundColor3 = color,
        TextColor3 = Color3.new(1, 1, 1),
        TextScaled = true,
        onClick = function()
          count:update(function(current) 
            return current + 1 
          end)
        end
      }
    }
  }
end`}
                lang="lua"
                theme="dark-plus"
              />
              <!-- Highlight overlay for state changes -->
              <div id="code-highlight" class="absolute inset-0 pointer-events-none opacity-0 transition-opacity duration-500">
                <div class="absolute top-[36px] left-4 right-4 h-6 bg-primary-500/20 rounded border border-primary-500/40"></div>
                <div class="absolute top-[62px] left-4 right-4 h-60 bg-primary-500/20 rounded border border-primary-500/40"></div>
                <div class="absolute top-[440px] left-4 right-4 h-20 bg-primary-500/20 rounded border border-primary-500/40"></div>
                <div class="absolute top-[804px] left-4 right-4 h-28 bg-primary-500/20 rounded border border-primary-500/40"></div>
              </div>
            </div>
          </div>
          
          <!-- UI Visualization Panel -->
          <div class="bg-zinc-900/80 backdrop-blur-sm border border-zinc-800 rounded-xl p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-zinc-200">Live Preview</h3>
              <div class="text-sm text-zinc-400">Interactive Demo</div>
            </div>
            
            <!-- Mock Roblox UI -->
            <div class="bg-gray-800 rounded-lg p-8 min-h-[400px] flex flex-col items-center justify-center relative">
              <!-- Mock UI Frame -->
              <div class="w-full max-w-sm bg-gray-700 rounded-lg p-6 shadow-xl">
                <!-- Count Display -->
                <div class="text-center mb-6">
                  <div id="count-display" class="text-3xl font-bold text-white transition-all duration-300">
                    Count: <span id="count-value">0</span>
                  </div>
                </div>
                
                <!-- Interactive Button -->
                <button 
                  id="demo-button"
                  class="w-full py-4 px-6 rounded-lg text-white font-semibold text-lg transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg"
                  style="background-color: rgb(70, 130, 255);"
                >
                  Click Me!
                </button>
              </div>
              
              <!-- State indicator -->
              <div class="mt-6 text-center">
                <div class="text-sm text-zinc-400 mb-2">Current State:</div>
                <div id="state-indicator" class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-500/20 text-blue-400 border border-blue-500/30">
                  count: <span id="state-value">0</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Key Features Section -->
    <section class="py-20 bg-zinc-900/50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl sm:text-4xl font-bold text-zinc-200 mb-8 text-center">
          Key Features
        </h2>
        <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
          <div class="bg-zinc-900 p-6 rounded-lg border border-zinc-800">
            <h3 class="text-lg font-semibold text-zinc-200 mb-3">🎯 Type Safety</h3>
            <p class="text-zinc-400 text-sm">
              Built for Luau with comprehensive type definitions and intellisense support.
            </p>
          </div>
          
          <div class="bg-zinc-900 p-6 rounded-lg border border-zinc-800">
            <h3 class="text-lg font-semibold text-zinc-200 mb-3">🔄 Automatic Updates</h3>
            <p class="text-zinc-400 text-sm">
              UI automatically stays in sync with your application state through reactive bindings.
            </p>
          </div>
          
          <div class="bg-zinc-900 p-6 rounded-lg border border-zinc-800">
            <h3 class="text-lg font-semibold text-zinc-200 mb-3">🧩 Component System</h3>
            <p class="text-zinc-400 text-sm">
              Build reusable components with props, state, and lifecycle hooks just like React.
            </p>
          </div>
          
          <div class="bg-zinc-900 p-6 rounded-lg border border-zinc-800">
            <h3 class="text-lg font-semibold text-zinc-200 mb-3">⚡ Smart Reconciliation</h3>
            <p class="text-zinc-400 text-sm">
              Efficient key-based diffing ensures only necessary elements are created, updated, or removed.
            </p>
          </div>
        </div>
      </div>
    </section>

    <!-- Modern Patterns Section -->
    <section class="py-20 bg-zinc-950">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl sm:text-4xl font-bold text-zinc-200 mb-8 text-center">
          Modern Development Patterns
        </h2>
        <div class="grid lg:grid-cols-2 gap-12 items-center">
          <div>
            <h3 class="text-2xl font-semibold text-zinc-200 mb-4">Context & State Management</h3>
            <p class="text-zinc-400 mb-6">
              Share state across your component tree with Rex's Context API. No prop drilling, just clean, maintainable code.
            </p>
            <div class="space-y-3">
              <div class="flex items-center gap-3">
                <div class="w-2 h-2 bg-primary-500 rounded-full"></div>
                <span class="text-zinc-300">Global state management with Context</span>
              </div>
              <div class="flex items-center gap-3">
                <div class="w-2 h-2 bg-primary-500 rounded-full"></div>
                <span class="text-zinc-300">Computed values with automatic dependency tracking</span>
              </div>
              <div class="flex items-center gap-3">
                <div class="w-2 h-2 bg-primary-500 rounded-full"></div>
                <span class="text-zinc-300">Async state handling with loading and error states</span>
              </div>
            </div>
          </div>
          <div class="prose text-zinc-300 grow max-w-xl w-full">
            <Code
              code={`-- Global theme context
local ThemeContext = Rex.createContext("dark")

local function App()
  local theme = Rex.useState("dark")
  
  return Rex.Provider {
    context = ThemeContext,
    value = theme,
    children = {
      Header(),
      MainContent(),
      Footer()
    }
  }
end

-- Use anywhere in the tree
local function ThemedButton()
  local theme = Rex.useContext(ThemeContext)
  
  return Rex("TextButton") {
    BackgroundColor3 = theme:map(function(t)
      return t == "dark" 
        and Color3.fromRGB(70, 130, 255)
        or Color3.fromRGB(240, 240, 240)
    end)
  }
end`}
              lang="lua"
              theme="dark-plus"
            />
          </div>
        </div>
      </div>
    </section>

    <!-- Call to Action Section -->
    <section class="py-20 bg-gradient-to-br from-primary-500 to-secondary-500 text-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2 class="text-3xl sm:text-4xl font-bold mb-4">
          Ready to modernize your Roblox UI?
        </h2>
        <p class="text-lg sm:text-xl mb-8 max-w-2xl mx-auto">
          Join developers who've already made the switch to Rex for cleaner, more maintainable, and more powerful user interfaces.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a
            href={DOCS_LINKS.introduction}
            class="inline-flex items-center px-8 py-3 bg-white text-zinc-900 font-semibold rounded-lg hover:bg-zinc-100 transition-colors border border-zinc-200"
          >
            Get Started
          </a>
          <a
            href={DOCS_LINKS.quickStart}
            class="inline-flex items-center px-8 py-3 bg-transparent text-white font-semibold rounded-lg hover:bg-white/10 transition-colors border border-white/20"
          >
            Quick Start Guide
          </a>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <Footer />
  </div>

  <!-- Interactive Demo Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let count = 0;
      let autoInterval: number | null = null;
      let isAutoRunning = false;
      
      const countValue = document.getElementById('count-value');
      const stateValue = document.getElementById('state-value');
      const demoButton = document.getElementById('demo-button');
      const autoBtn = document.getElementById('auto-demo-btn');
      const resetBtn = document.getElementById('reset-demo-btn');
      const codeHighlight = document.getElementById('code-highlight');
      const stateIndicator = document.getElementById('state-indicator');
      
      // Early return if elements don't exist
      if (!countValue || !stateValue || !demoButton || !autoBtn || !resetBtn || !codeHighlight || !stateIndicator) {
        console.warn('Demo elements not found');
        return;
      }
      
      function updateUI() {
        // Update count display
        countValue!.textContent = count.toString();
        stateValue!.textContent = count.toString();
        
        // Update button color based on count
        let color: string;
        let indicatorClass: string;
        if (count < 5) {
          color = 'rgb(70, 130, 255)'; // Blue
          indicatorClass = 'bg-blue-500/20 text-blue-400 border-blue-500/30';
        } else if (count < 10) {
          color = 'rgb(255, 165, 0)'; // Orange
          indicatorClass = 'bg-orange-500/20 text-orange-400 border-orange-500/30';
        } else {
          color = 'rgb(255, 70, 130)'; // Pink
          indicatorClass = 'bg-pink-500/20 text-pink-400 border-pink-500/30';
        }
        
        demoButton!.style.backgroundColor = color;
        
        // Update state indicator
        stateIndicator!.className = `inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${indicatorClass}`;
        
        // Flash the code highlight
        codeHighlight!.style.opacity = '1';
        setTimeout(() => {
          codeHighlight!.style.opacity = '0';
        }, 800);
        
        // Add button press animation
        demoButton!.style.transform = 'scale(0.95)';
        setTimeout(() => {
          demoButton!.style.transform = 'scale(1)';
        }, 150);
      }
      
      function incrementCount() {
        count++;
        updateUI();
      }
      
      function resetDemo() {
        count = 0;
        updateUI();
        stopAutoDemo();
      }
      
      function startAutoDemo() {
        if (isAutoRunning) {
          stopAutoDemo();
          return;
        }
        
        isAutoRunning = true;
        autoBtn!.textContent = '⏸ Stop Demo';
        autoBtn!.classList.remove('bg-primary-500', 'hover:bg-primary-600');
        autoBtn!.classList.add('bg-red-500', 'hover:bg-red-600');
        
        autoInterval = window.setInterval(() => {
          incrementCount();
          // Stop at 12 to show the progression
          if (count >= 12) {
            stopAutoDemo();
          }
        }, 1500);
      }
      
      function stopAutoDemo() {
        if (autoInterval !== null) {
          clearInterval(autoInterval);
          autoInterval = null;
        }
        isAutoRunning = false;
        autoBtn!.textContent = '▶ Watch Auto Demo';
        autoBtn!.classList.remove('bg-red-500', 'hover:bg-red-600');
        autoBtn!.classList.add('bg-primary-500', 'hover:bg-primary-600');
      }
      
      // Event listeners
      demoButton!.addEventListener('click', incrementCount);
      autoBtn!.addEventListener('click', startAutoDemo);
      resetBtn!.addEventListener('click', resetDemo);
      
      // Initialize UI
      updateUI();
      
      // Auto-start demo after a delay to catch user attention
      setTimeout(() => {
        if (count === 0 && !isAutoRunning) {
          // Create a subtle hint animation
          autoBtn!.style.animation = 'pulse 2s infinite';
          setTimeout(() => {
            autoBtn!.style.animation = '';
          }, 6000);
        }
      }, 3000);
      
      // Intersection observer to auto-start demo when section comes into view
      const demoSection = document.querySelector('section:has(#demo-button)');
      if (demoSection) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && count === 0 && !isAutoRunning) {
              // Small delay then start auto demo for first-time viewers
              setTimeout(() => {
                if (count === 0 && !isAutoRunning) {
                  startAutoDemo();
                }
              }, 2000);
            }
          });
        }, { threshold: 0.5 });
        
        observer.observe(demoSection);
      }
    });
  </script>

  <style>
    @keyframes pulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.8; }
    }
    
    .bg-grid-pattern-dark {
      background-image: 
        linear-gradient(rgba(255, 255, 255, 0.03) 1px, transparent 1px),
        linear-gradient(90deg, rgba(255, 255, 255, 0.03) 1px, transparent 1px);
      background-size: 20px 20px;
    }
  </style>
</Layout>